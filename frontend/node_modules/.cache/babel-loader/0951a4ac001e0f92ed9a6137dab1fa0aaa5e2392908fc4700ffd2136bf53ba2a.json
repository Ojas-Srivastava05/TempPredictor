{"ast":null,"code":"var _jsxFileName = \"/Users/ojas/Desktop/TempPredictor/frontend/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { CloudIcon, ThermometerIcon, MapPinIcon, SparklesIcon } from '@heroicons/react/24/outline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [city, setCity] = useState('Delhi');\n  const [manualTemp, setManualTemp] = useState('');\n  const [result, setResult] = useState('');\n  const [loading, setLoading] = useState(false);\n  const fetchCurrentTemp = async () => {\n    if (!city.trim()) {\n      setResult('Please enter a city name');\n      return;\n    }\n    setLoading(true);\n    setResult('Loading...');\n    try {\n      const response = await fetch(`/api/current-temp?city=${encodeURIComponent(city)}`);\n      const data = await response.json();\n      if (!response.ok) {\n        setResult(`Error: ${data.error || JSON.stringify(data)}`);\n        return;\n      }\n      setResult(`City: ${data.city} — Current: ${data.current_temp}°C — Predicted tomorrow: ${data.predicted_tomorrow}°C`);\n    } catch (error) {\n      setResult(`Network error: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const predictFromManualTemp = async () => {\n    const temp = parseFloat(manualTemp);\n    if (isNaN(temp)) {\n      setResult('Please enter a valid number');\n      return;\n    }\n    setLoading(true);\n    setResult('Predicting...');\n    try {\n      const response = await fetch('/api/predict', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          today_temp: temp\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        setResult(`Error: ${data.error || JSON.stringify(data)}`);\n        return;\n      }\n      setResult(`Today: ${data.today}°C — Predicted tomorrow: ${data.predicted_tomorrow}°C`);\n    } catch (error) {\n      setResult(`Network error: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ...rest of the component remains the same...\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-gradient-to-br from-blue-400 via-purple-500 to-pink-500 flex items-center justify-center p-4\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"zAyWXYPwpXLMXS5/3ZiDXaojVI8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","CloudIcon","ThermometerIcon","MapPinIcon","SparklesIcon","jsxDEV","_jsxDEV","App","_s","city","setCity","manualTemp","setManualTemp","result","setResult","loading","setLoading","fetchCurrentTemp","trim","response","fetch","encodeURIComponent","data","json","ok","error","JSON","stringify","current_temp","predicted_tomorrow","message","predictFromManualTemp","temp","parseFloat","isNaN","method","headers","body","today_temp","today","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/ojas/Desktop/TempPredictor/frontend/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { CloudIcon, ThermometerIcon, MapPinIcon, SparklesIcon } from '@heroicons/react/24/outline';\n\nfunction App() {\n  const [city, setCity] = useState('Delhi');\n  const [manualTemp, setManualTemp] = useState('');\n  const [result, setResult] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  const fetchCurrentTemp = async () => {\n    if (!city.trim()) {\n      setResult('Please enter a city name');\n      return;\n    }\n    \n    setLoading(true);\n    setResult('Loading...');\n    \n    try {\n      const response = await fetch(`/api/current-temp?city=${encodeURIComponent(city)}`);\n      const data = await response.json();\n      \n      if (!response.ok) {\n        setResult(`Error: ${data.error || JSON.stringify(data)}`);\n        return;\n      }\n      \n      setResult(`City: ${data.city} — Current: ${data.current_temp}°C — Predicted tomorrow: ${data.predicted_tomorrow}°C`);\n    } catch (error) {\n      setResult(`Network error: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const predictFromManualTemp = async () => {\n    const temp = parseFloat(manualTemp);\n    if (isNaN(temp)) {\n      setResult('Please enter a valid number');\n      return;\n    }\n    \n    setLoading(true);\n    setResult('Predicting...');\n    \n    try {\n      const response = await fetch('/api/predict', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ today_temp: temp })\n      });\n      \n      const data = await response.json();\n      \n      if (!response.ok) {\n        setResult(`Error: ${data.error || JSON.stringify(data)}`);\n        return;\n      }\n      \n      setResult(`Today: ${data.today}°C — Predicted tomorrow: ${data.predicted_tomorrow}°C`);\n    } catch (error) {\n      setResult(`Network error: ${error.message}`);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // ...rest of the component remains the same...\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-400 via-purple-500 to-pink-500 flex items-center justify-center p-4\">\n      {/* ...existing JSX code... */}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}